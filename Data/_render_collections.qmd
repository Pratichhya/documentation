
```{python}
import json

meta = None
with open("./collections.json") as f:
    meta = json.load(f)["collections"]


meta = [ c for c in meta if mission in c["id"] ]

from IPython.display import display, Markdown, Latex

text = ''

for c in meta:

    title = c["title"]
    gsd = c["gsd"]
    datatype = c["type"]

    def find_link(rel=None,href_contains=None, title_contains=None):
        results = [ l["href"] for l in c.get("links",[]) if (rel is None or l["rel"]==rel) and (href_contains==None or href_contains in l["href"]) and (title_contains==None or title_contains in l["title"]) ]
        if len(results) == 0:
            return None
        else:
            return results[0]

    links = { l["rel"] + l.get("title",""):l["href"] for l in c.get("links",[])}
    userguide = find_link(rel="about",title_contains="User")
    opensearch = find_link(rel="opensearch")

    if userguide is not None:
        userguide = f"""[![User guide](https://img.shields.io/badge/-User_guide-green"User guide")]({userguide})"""
    else:
        userguide = ""

    if gsd is not None:
        gsd = f"""![Resolution](https://img.shields.io/badge/resolution-{gsd}m-green?style=flat-square)
![Revisit](https://img.shields.io/badge/revisit-5--daily-green?style=flat-square)  
"""
    else:
        gsd = ""

    if "ARD" in datatype:
        datatype = f"""![](https://img.shields.io/badge/{datatype}-success) """
    elif "Unprojected" in datatype:
        datatype = f"""![](https://img.shields.io/badge/{datatype}-important) """
    else:
        datatype = ""

    if opensearch is not None:
        opensearch = f"""[![Catalog API](https://img.shields.io/badge/-Catalog_API-orange
"Catalog API")
]({opensearch})"""
    else:
        opensearch = ""

    text = text + f"""

## {title}

{userguide}
{opensearch}

{gsd} {datatype}

**Overview**

{c["description"]}

"""


display(Markdown(text))
```